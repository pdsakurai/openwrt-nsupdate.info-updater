#Destination file: /usr/bin/update_ddns
#!/bin/sh

readonly cmd_resolve="wget -qO-"

function log() {
    local level="${1:?Missing: Log level}"
    shift
    local tag="update_ddns[$$]"
    logger -t "$tag" -pdaemon.$level "$@"
}

function log_info() {
    log "info" $@
}

function log_warning() {
    log "warning" $@
}

function log_error() {
    log "err" $@
}

function is_under_CGN() {
    local my_ip_address="${1:?Missing:IP address}"

    local result=$( traceroute "$my_ip_address" -n -m3 | tail -1 | xargs )
    local hops=$( printf "$result" | cut -d ' ' -f 1 )
    local ip_address=$( printf "$result" | cut -d ' ' -f 2 )

    if [ "$hops" == "1" ] && [ "$my_ip_address" == "$ip_address" ]; then
        return 1
    fi

    log_warning "IPv4 network is under CGN."
    return 0
}

function is_update_needed() {
    local ip_version="${1:?Missing: IP version}"
    local my_ip_address="${2:-NXDOMAIN}"

    local dns_record_type="$( [ "$ip_version" == "IPv4" ] \
        && printf "a" \
        || printf "aaaa" )"

    local _is_update_needed=0 retry_left=3
    while [ $retry_left -gt 0 ] && [ $_is_update_needed -ne 1 ]; do
        [ $( nslookup -type=$dns_record_type $HOST_NAME | grep -c "$my_ip_address" ) -ge 1 ] \
            && _is_update_needed=1 \
            || sleep 1s
        retry_left=$(( retry_left - 1 ))
    done

    local ip_address=
    local ip_addresses=$( nslookup -type=$dns_record_type $HOST_NAME | grep "answer:" -A 30 | grep "Address:" | cut -d' ' -f2 )
    for ip_address in $ip_addresses; do
        [ $( ip address | grep -c "$ip_address" ) -ge 1 ] \
            && _is_update_needed=0 \
            && break
    done

    return $_is_update_needed
}

function delete_hostname() {
    local ip_version="${1:?Missing: IP version}"

    local result="$( $cmd_resolve "https://$HOST_NAME:$SECRET_KEY@$ip_version.nsupdate.info/nic/delete" )"
    local result_successful="deleted *"
    case "$result" in
        $result_successful)
            log_info "$ip_version address deleted for $HOST_NAME."
            return 0
            ;;
        *)
            log_error "Failed to delete $ip_version address for $HOST_NAME. Error: $result"
            return 1
            ;;
    esac
}

function change_hostname() {
    local ip_version="${1:?Missing: IP version}"

    local result=$( $cmd_resolve "https://$HOST_NAME:$SECRET_KEY@$ip_version.nsupdate.info/nic/update" )
    local updated_ip_address=$( printf "$result" | cut -d ' ' -f 2 )
    local result_successful_changed="good"
    local result_successful_unchanged="nochg"
    case $( printf "$result" | cut -d ' ' -f 1 ) in
        $result_successful_changed)
            log_info "$HOST_NAME has been updated successfully with $ip_version address: $updated_ip_address"
            ;;
        $result_successful_unchanged)
            log_warning "$HOST_NAME still has the same $ip_version address: $updated_ip_address."
            ;;
        *)
            log_error "Failed to update $HOST_NAME with $ip_version address. Error: $result"
            return 1
            ;;
    esac

    return 0
}

function update_hostname() {
    local ip_version="${1:?Missing: IP version}"
    local my_ip_address="$2"

    if [ -z "$my_ip_address" ]; then
        delete_hostname "$1"
    else
        change_hostname "$1"
    fi

    return $?
}

function get_my_ip_address() {
    local my_ip_address="" retry_left=3
    while [ $retry_left -gt 0 ] && [ -z "$my_ip_address" ]; do
        my_ip_address="$( $cmd_resolve "https://my${1:?Missing: IP version}.addr.tools/" 2> /dev/null )"
        [ -z "$my_ip_address" ] && {
            sleep 1s
            retry_left=$(( retry_left - 1 ))
        }
    done

    echo $my_ip_address
}

function process() {
    local ip_version="${1:?Missing: IP version}"

    local my_ip_address=$( get_my_ip_address "$ip_version" )
    [ -z "$my_ip_address" ] && {
        log_error "Cannot determine own public $ip_version address."
        return 1
    }
    if [ "$ip_version" == "IPv4" ] && [ -n "$my_ip_address" ] && is_under_CGN "$my_ip_address"; then
        my_ip_address=""
    fi

    if is_update_needed "$ip_version" "$my_ip_address"; then
        update_hostname "$ip_version" "$my_ip_address"
    fi
}

function is_it_working() {
    local ip_version="${1:?Missing: IP version}"
    ping -${ip_version#IPv} -c1 -q -w10 google.com &> /dev/null
}

if [ -z "$HOST_NAME" ] || [ -z "$SECRET_KEY" ]; then
    log_error "Environment variables--HOST_NAME and SECRET_KEY--must be defined."
    exit 1
fi

while true; do
    delay="5m"

    for item in IPv4 IPv6; do
        is_it_working "$item" && { 
            process "$item" \
                || delay="1m"
        }
    done

    sleep $delay
done
